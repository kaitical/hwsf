
#include <stdio.h>
#include <opencv2/opencv.hpp>
#include "facedetectcnn.h"

//define the buffer size. Do not change the size!
#define DETECT_BUFFER_SIZE 0x20000
using namespace cv;
using namespace std;

int main(int argc, char* argv[])
{
    int u;
    printf("请选择您的难度：1~5:简单 6~14:困难 >15:地狱\n");
    scanf_s(" %d", &u);

    if (argc != 2)
    {
        printf("Usage: %s <camera index>\n", argv[0]);
        return -1;
    }

    int* pResults = NULL;
    //pBuffer is used in the detection functions.
    //If you call functions in multiple threads, please create one buffer for each thread!
    unsigned char* pBuffer = (unsigned char*)malloc(DETECT_BUFFER_SIZE);
    if (!pBuffer)
    {
        fprintf(stderr, "Can not alloc buffer.\n");
        return -1;
    }


    VideoCapture cap;
    Mat im;

    if (isdigit(argv[1][0]))
    {
        cap.open(argv[1][0] - '0');
        if (!cap.isOpened())
        {
            cerr << "Cannot open the camera." << endl;
            return 0;
        }
    }
    int count = 0;
    cv::Mat img2 = cv::imread("zhiyin.jpg");
    cv::resize(img2, img2, cv::Size(300, 300));
    cv::Mat img3 = cv::imread("defeat.jpg");
    cv::Mat sub = cv::imread("ji.png"); // 打开潜水艇图
    cv::resize(sub, sub, cv::Size(40, 40)); // 缩放到合适大小
    int cordX = 100; // 这是潜水艇放在摄像头画面上的水平坐标
    cv::Mat img = cv::imread("D:\\edge\\AI_course-master\\AI_course-master\\case\\submarine\\background\\12.png");
    int fx = 0;// 从柱子图最左边开始截取
    if (cap.isOpened())
    {
        while (true)
        {
            cap >> im;
            int win = 300; //截取窗口宽度
            cv::Mat img1 = img(cv::Rect(fx, 0, 300, img.rows));
            cv::resize(img1, img1, im.size()); // 缩放到相同大小
            uchar* pframe = im.data; //摄像头图像数据起始地址指针
            uchar* pimg = img1.data;//柱子图像数据起始地址指针
            for (int i = 0; i < img1.rows; i++) // 循环图像每一行
                for (int j = 0; j < img1.cols; j++)// 循环图像每一行
                {
                    // 判断柱子图是否为白色区域。仅对非白色区域，才把摄像头的像素覆盖掉
                    if (pimg[i * img1.cols * 3 + j * 3 + 0] +
                        pimg[i * img1.cols * 3 + j * 3 + 1] +
                        pimg[i * img1.cols * 3 + j * 3 + 2] < 200 * 3)
                    {
                        // BGR（蓝绿红）三个通道依次赋值
                        pframe[i * img1.cols * 3 + j * 3 + 0] = pimg[i * img1.cols * 3 + j * 3 + 0];
                        pframe[i * img1.cols * 3 + j * 3 + 1] = pimg[i * img1.cols * 3 + j * 3 + 1];
                        pframe[i * img1.cols * 3 + j * 3 + 2] = pimg[i * img1.cols * 3 + j * 3 + 2];
                    }
                }
            fx += u; // 柱子图每帧滑动步长
            if (fx > img.cols - win) // 当到达图像右边界，通关
            {
                imshow("win", img2);
                waitKey(100);
                printf("你赢了");
            }
            // fx = 0;
            cv::waitKey(1); // 等待1毫秒，以便能观看视频


            //cout << "Image size: " << im.rows << "X" << im.cols << endl;
            Mat image = im.clone();

            ///////////////////////////////////////////
            // CNN face detection 
            // Best detection rate
            //////////////////////////////////////////
            //!!! The input image must be a BGR one (three-channel) instead of RGB
            //!!! DO NOT RELEASE pResults !!!
            TickMeter cvtm;
            cvtm.start();

            pResults = facedetect_cnn(pBuffer, (unsigned char*)(image.ptr(0)), image.cols, image.rows, (int)image.step);

            cvtm.stop();
            printf("time = %gms\n", cvtm.getTimeMilli());

            // printf("%d faces detected.\n", (pResults ? *pResults : 0));
            Mat result_image = image.clone();
            //print the detection results
            for (int i = 0; i < (pResults ? *pResults : 0); i++)
            {
                short* p = ((short*)(pResults + 1)) + 142 * i;
                int confidence = p[0];
                int x = p[1];
                int y = p[2];
                int w = p[3];
                int h = p[4];

                //sub.copyTo(result_image(cv::Rect(cordX, p[5 + 5], sub.cols, sub.rows)));


                uchar* pimage = result_image.data; // 摄像头画面图像数据的起始地址指针
                uchar* psub = sub.data;// 潜水艇图像数据的起始地址指针
                for (int m = 0; m < sub.rows; m++)
                {
                    for (int n = 0; n < sub.cols; n++)
                    {
                        // 判断是否为白色区域，仅当非白色区域时，才用前景图像素进行覆盖
                        if (psub[m * sub.cols * 3 + n * 3 + 0] +
                            psub[m * sub.cols * 3 + n * 3 + 1] +
                            psub[m * sub.cols * 3 + n * 3 + 2] < 250 * 3)
                        {
                            if (img1.data[(p[5 + 5] + m) * result_image.cols * 3 + (cordX + n) * 3 + 0] +
                                img1.data[(p[5 + 5] + m) * result_image.cols * 3 + (cordX + n) * 3 + 1] +
                                img1.data[(p[5 + 5] + m) * result_image.cols * 3 + (cordX + n) * 3 + 1] < 255 * 3) {

                                count = 1;

                            }
                            else
                            {
                                pimage[(p[5 + 5] + m) * result_image.cols * 3 + (cordX + n) * 3 + 0] = psub[m * sub.cols * 3 + n * 3 + 0];
                                pimage[(p[5 + 5] + m) * result_image.cols * 3 + (cordX + n) * 3 + 1] = psub[m * sub.cols * 3 + n * 3 + 1];
                                pimage[(p[5 + 5] + m) * result_image.cols * 3 + (cordX + n) * 3 + 2] = psub[m * sub.cols * 3 + n * 3 + 2];
                            }
                        }
                    }
                }
                //show the score of the face. Its range is [0-100]
                char sScore[256];
                snprintf(sScore, 256, "%d", confidence);
                cv::putText(result_image, sScore, cv::Point(x, y - 3), cv::FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(0, 255, 0), 1);

                //draw face rectangle
               // rectangle(result_image, Rect(x, y, w, h), Scalar(0, 255, 0), 2);
                //draw five face landmarks in different colors
                //cv::circle(result_image, cv::Point(p[5], p[5 + 1]), 1, cv::Scalar(255, 0, 0), 2);
                //cv::circle(result_image, cv::Point(p[5 + 2], p[5 + 3]), 1, cv::Scalar(0, 0, 255), 2);
                //cv::circle(result_image, cv::Point(p[5 + 4], p[5 + 5]), 1, cv::Scalar(0, 255, 0), 2);
                //cv::circle(result_image, cv::Point(p[5 + 6], p[5 + 7]), 1, cv::Scalar(255, 0, 255), 2);
                //cv::circle(result_image, cv::Point(p[5 + 8], p[5 + 9]), 1, cv::Scalar(0, 255, 255), 2);

                //print the result
               // printf("face %d: confidence=%d, [%d, %d, %d, %d] (%d,%d) (%d,%d) (%d,%d) (%d,%d) (%d,%d)\n",
                 //   i, confidence, x, y, w, h,
                  // p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[12], p[13], p[14]);


            }imshow("result", result_image);

            if ((cv::waitKey(2) & 0xFF) == 'q')
                break;
            if (count == 1) {
                printf("你输了,哥哥寄了！");
                imshow("哎哟你干嘛", img3);
                waitKey(100);

                break;

            }

        }
    }



    //release the buffer
    free(pBuffer);

    return 0;
}
